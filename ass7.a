#Note: Enter the entries of array in ascending order(as given in question, sorted array is given as an input).
#This program will print the leftmost index(if key is found) starting from 0. So, if array is 1,2,3,4 and
#search key is 3, it would print 2(and not 3)  
#It'll print '-1' if the query is not found

#Data Declarations
.data
	msg_1 : .asciiz "Enter Number of integers in the array: "
	msg_2 : .asciiz "Enter next integer: "
	msg_3 : .asciiz "Enter the key to search: "
	msg_4 : .asciiz "Leftmost index of the integer: "
	space : .asciiz " "
	array_size : .word 0
	key : .word 0
	return : .word -1
	array : .word 0
#=========================================================================================
#Program code
.text
	.globl main

	main:
		#print message string
		li $v0, 4
		la $a0, msg_1			#2nd argument is the pointer to the string
		syscall

		#scan int
		li $v0, 5
		syscall
		move $t0,$v0
		sw $t0, array_size		#store size of array in t0

		li $t1,0
		la $t2,array 			#store pointer of array in t2

		j scan_array

	#=====================================================================================
	#loop to scan all the integers
	scan_array:
		ble $t0,$t1,scan_key	#if t0<t1

		li	$v0, 4				#Code to print msg_2
		la 	$a0, msg_2
		syscall

		li $v0, 5				#code to scan int and save to memory
		syscall
		sw $v0,($t2)

		addi $t2,4				#store address of next memory
		addi $t1,1				#increment loop count

		j scan_array

	scan_key:
		li	$v0, 4				#Code to print msg_2
		la 	$a0, msg_3
		syscall

		li $v0, 5				#code to scan int and save to memory
		syscall
		sw $v0,key
		lw $t7,key			#t7=key

	binary_search:
		li $t3, 0				#i=0
		li $t4, 0				#j=0
		addi $t5, $t0, -1		#k=n-1

		while:
			bgt $t4, $t5, not_found		#break if j>=k

			add $t3, $t4, $t5			#i=(j+k)/2
			div $t3, $t3, 2

			la $t2,array 			#store pointer of array in t2

			mul $t6, $t3,4			#t6 = address of a[i]-a[0]
			add $t2, $t2, $t6		#t2 = address of a[i]

			lw $t2, ($t2)			#t2 = a[i]
			blt $t2, $t7, increment_j	#if(a[i]<key)	j=i

			bgt $t2, $t7, decrement_k	#if(a[i]>key)	j=k

			beq $t2, $t7, found 			#else found

			j while

			increment_j:
				addi $t4, $t3, 1		#j=i+1
				j while

			decrement_k:
				addi $t5, $t3, -1		#k=i-1
				j while

		not_found:
			#print message string
			li $v0, 1
			lw $a0, return			#2nd argument is the pointer to the string
			syscall
			j exit

		found:
			#print message string
			li $v0, 4
			la $a0, msg_4			#2nd argument is the pointer to the string
			syscall

			search_i:
				blt $t3, $zero, print_i
				addi $t3, $t3, -1

				la $t2,array 			#store pointer of array in t2

				mul $t6, $t3,4			#t6 = address of a[i]-a[0]
				add $t2, $t2, $t6		#t2 = address of a[i]

				lw $t2, ($t2)			#t2 = a[i]

				beq $t2, $t7, search_i

			print_i:
				li	$v0, 1				#Code to print int
				addi $a0, $t3, 1
				syscall

			j exit

	exit: 
		#exit call
		li $v0, 10
		syscall